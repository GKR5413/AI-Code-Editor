syntax = "proto3";

package frontend;

// Frontend Gateway service - aggregates all backend services for the frontend
service FrontendGatewayService {
  // Health check
  rpc HealthCheck(HealthRequest) returns (HealthResponse);
  
  // Agent service proxying
  rpc SendMessageToAgent(SendMessageRequest) returns (SendMessageResponse);
  rpc StreamConversationWithAgent(StreamConversationRequest) returns (stream ConversationChunk);
  rpc GenerateCode(CodeGenerationRequest) returns (CodeGenerationResponse);
  
  // Compiler service proxying
  rpc CompileCode(CompileRequest) returns (CompileResponse);
  rpc RunCode(RunRequest) returns (RunResponse);
  rpc StreamExecution(StreamExecutionRequest) returns (stream ExecutionOutput);
  rpc GetSupportedLanguages(LanguagesRequest) returns (LanguagesResponse);
  
  // File operations
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse);
  rpc ReadFile(ReadFileRequest) returns (ReadFileResponse);
  rpc WriteFile(WriteFileRequest) returns (WriteFileResponse);
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
  rpc CreateDirectory(CreateDirectoryRequest) returns (CreateDirectoryResponse);
  
  // Authentication proxying
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  
  // System operations
  rpc GetSystemStatus(SystemStatusRequest) returns (SystemStatusResponse);
}

// Re-import common message types (simplified versions)

// Health check
message HealthRequest {}

message HealthResponse {
  bool healthy = 1;
  string message = 2;
  map<string, string> services = 3;
}

// Agent messages
message SendMessageRequest {
  string model = 1;
  repeated ChatMessage messages = 2;
  MessageOptions options = 3;
}

message ChatMessage {
  string role = 1;
  string content = 2;
  int64 timestamp = 3;
}

message MessageOptions {
  double temperature = 1;
  int32 max_tokens = 2;
  bool stream = 3;
}

message SendMessageResponse {
  bool success = 1;
  string response = 2;
  string model = 3;
  int64 timestamp = 4;
  string error = 5;
}

message StreamConversationRequest {
  string model = 1;
  repeated ChatMessage messages = 2;
  MessageOptions options = 3;
}

message ConversationChunk {
  string content = 1;
  string type = 2;
  bool is_final = 3;
  int64 timestamp = 4;
}

message CodeGenerationRequest {
  string prompt = 1;
  string language = 2;
  string model = 3;
}

message CodeGenerationResponse {
  bool success = 1;
  string code = 2;
  string language = 3;
  string explanation = 4;
  string error = 5;
}

// Compiler messages
message CompileRequest {
  string language = 1;
  string code = 2;
  string filename = 3;
  CompileOptions options = 4;
}

message CompileOptions {
  int32 timeout = 1;
  map<string, string> environment = 2;
}

message CompileResponse {
  bool success = 1;
  string stage = 2;
  string stdout = 3;
  string stderr = 4;
  string error = 5;
  int32 exit_code = 6;
  int64 execution_time = 7;
}

message RunRequest {
  string language = 1;
  string code = 2;
  string filename = 3;
  string input = 4;
  CompileOptions options = 5;
}

message RunResponse {
  bool success = 1;
  string stage = 2;
  string stdout = 3;
  string stderr = 4;
  string error = 5;
  int32 exit_code = 6;
  int64 execution_time = 7;
}

message StreamExecutionRequest {
  string session_id = 1;
  bool follow = 2;
}

message ExecutionOutput {
  string data = 1;
  string type = 2;
  int64 timestamp = 3;
  bool is_final = 4;
}

message LanguagesRequest {}

message LanguagesResponse {
  bool success = 1;
  repeated Language languages = 2;
  string error = 3;
}

message Language {
  string name = 1;
  string extension = 2;
  bool has_compile_step = 3;
}

// File operations
message ListFilesRequest {
  string directory = 1;
  bool recursive = 2;
}

message ListFilesResponse {
  bool success = 1;
  repeated FileInfo files = 2;
  string error = 3;
}

message FileInfo {
  string name = 1;
  string path = 2;
  string type = 3;
  int64 size = 4;
  int64 modified_time = 5;
}

message ReadFileRequest {
  string path = 1;
}

message ReadFileResponse {
  bool success = 1;
  string content = 2;
  string error = 3;
}

message WriteFileRequest {
  string path = 1;
  string content = 2;
  bool create_directories = 3;
}

message WriteFileResponse {
  bool success = 1;
  string message = 2;
  string error = 3;
}

message DeleteFileRequest {
  string path = 1;
  bool recursive = 2;
}

message DeleteFileResponse {
  bool success = 1;
  string message = 2;
  string error = 3;
}

message CreateDirectoryRequest {
  string path = 1;
  bool recursive = 2;
}

message CreateDirectoryResponse {
  bool success = 1;
  string message = 2;
  string error = 3;
}

// Authentication
message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string access_token = 2;
  User user = 3;
  string error = 4;
}

message RegisterRequest {
  string email = 1;
  string password = 2;
  string name = 3;
}

message RegisterResponse {
  bool success = 1;
  string message = 2;
  string error = 3;
}

message LogoutRequest {
  string token = 1;
}

message LogoutResponse {
  bool success = 1;
  string message = 2;
}

message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  bool valid = 1;
  User user = 2;
  string error = 3;
}

message User {
  string id = 1;
  string email = 2;
  string name = 3;
  string avatar_url = 4;
}

// System status
message SystemStatusRequest {}

message SystemStatusResponse {
  bool healthy = 1;
  map<string, ServiceStatus> services = 2;
  SystemMetrics metrics = 3;
  int64 timestamp = 4;
}

message ServiceStatus {
  bool healthy = 1;
  string status = 2;
  string version = 3;
  int64 uptime = 4;
  string error = 5;
}

message SystemMetrics {
  double cpu_usage = 1;
  double memory_usage = 2;
  double disk_usage = 3;
  int32 active_sessions = 4;
  int32 total_requests = 5;
}