// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "terminal.proto" (package "terminal", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Request to execute a command
 *
 * @generated from protobuf message terminal.CommandRequest
 */
export interface CommandRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string command = 2
     */
    command: string;
    /**
     * @generated from protobuf field: string working_directory = 3
     */
    workingDirectory: string;
    /**
     * @generated from protobuf field: map<string, string> environment = 4
     */
    environment: {
        [key: string]: string;
    };
}
/**
 * Response from command execution
 *
 * @generated from protobuf message terminal.CommandResponse
 */
export interface CommandResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * @generated from protobuf field: string output = 2
     */
    output: string;
    /**
     * @generated from protobuf field: string error = 3
     */
    error: string;
    /**
     * @generated from protobuf field: int32 exit_code = 4
     */
    exitCode: number;
    /**
     * @generated from protobuf field: string session_id = 5
     */
    sessionId: string;
}
/**
 * Request to get terminal output
 *
 * @generated from protobuf message terminal.OutputRequest
 */
export interface OutputRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: int32 max_lines = 2
     */
    maxLines: number;
}
/**
 * Response with terminal output
 *
 * @generated from protobuf message terminal.OutputResponse
 */
export interface OutputResponse {
    /**
     * @generated from protobuf field: repeated string lines = 1
     */
    lines: string[];
    /**
     * @generated from protobuf field: bool has_more = 2
     */
    hasMore: boolean;
    /**
     * @generated from protobuf field: string session_id = 3
     */
    sessionId: string;
}
/**
 * Request to stream terminal output
 *
 * @generated from protobuf message terminal.StreamRequest
 */
export interface StreamRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: bool follow = 2
     */
    follow: boolean;
}
/**
 * Chunk of terminal output for streaming
 *
 * @generated from protobuf message terminal.OutputChunk
 */
export interface OutputChunk {
    /**
     * @generated from protobuf field: string data = 1
     */
    data: string;
    /**
     * @generated from protobuf field: string session_id = 2
     */
    sessionId: string;
    /**
     * @generated from protobuf field: int64 timestamp = 3
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: bool is_error = 4
     */
    isError: boolean;
}
/**
 * Request to create a new terminal session
 *
 * @generated from protobuf message terminal.SessionRequest
 */
export interface SessionRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string shell = 2
     */
    shell: string;
    /**
     * @generated from protobuf field: string working_directory = 3
     */
    workingDirectory: string;
    /**
     * @generated from protobuf field: map<string, string> environment = 4
     */
    environment: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: int32 cols = 5
     */
    cols: number;
    /**
     * @generated from protobuf field: int32 rows = 6
     */
    rows: number;
}
/**
 * Response from session creation
 *
 * @generated from protobuf message terminal.SessionResponse
 */
export interface SessionResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * @generated from protobuf field: string session_id = 2
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string message = 3
     */
    message: string;
}
/**
 * Request to list active sessions
 *
 * @generated from protobuf message terminal.ListSessionsRequest
 */
export interface ListSessionsRequest {
}
/**
 * Response with list of active sessions
 *
 * @generated from protobuf message terminal.ListSessionsResponse
 */
export interface ListSessionsResponse {
    /**
     * @generated from protobuf field: repeated terminal.SessionInfo sessions = 1
     */
    sessions: SessionInfo[];
}
/**
 * Information about a terminal session
 *
 * @generated from protobuf message terminal.SessionInfo
 */
export interface SessionInfo {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string shell = 2
     */
    shell: string;
    /**
     * @generated from protobuf field: string working_directory = 3
     */
    workingDirectory: string;
    /**
     * @generated from protobuf field: int32 cols = 4
     */
    cols: number;
    /**
     * @generated from protobuf field: int32 rows = 5
     */
    rows: number;
    /**
     * @generated from protobuf field: bool is_active = 6
     */
    isActive: boolean;
    /**
     * @generated from protobuf field: int64 created_at = 7
     */
    createdAt: bigint;
}
/**
 * Request to kill a session
 *
 * @generated from protobuf message terminal.KillSessionRequest
 */
export interface KillSessionRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
}
/**
 * Response from killing a session
 *
 * @generated from protobuf message terminal.KillSessionResponse
 */
export interface KillSessionResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CommandRequest$Type extends MessageType<CommandRequest> {
    constructor() {
        super("terminal.CommandRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "working_directory", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "environment", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<CommandRequest>): CommandRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.command = "";
        message.workingDirectory = "";
        message.environment = {};
        if (value !== undefined)
            reflectionMergePartial<CommandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandRequest): CommandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* string command */ 2:
                    message.command = reader.string();
                    break;
                case /* string working_directory */ 3:
                    message.workingDirectory = reader.string();
                    break;
                case /* map<string, string> environment */ 4:
                    this.binaryReadMap4(message.environment, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: CommandRequest["environment"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CommandRequest["environment"] | undefined, val: CommandRequest["environment"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for terminal.CommandRequest.environment");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: CommandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* string command = 2; */
        if (message.command !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.command);
        /* string working_directory = 3; */
        if (message.workingDirectory !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.workingDirectory);
        /* map<string, string> environment = 4; */
        for (let k of globalThis.Object.keys(message.environment))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.environment[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.CommandRequest
 */
export const CommandRequest = new CommandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandResponse$Type extends MessageType<CommandResponse> {
    constructor() {
        super("terminal.CommandResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "output", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "exit_code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommandResponse>): CommandResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.output = "";
        message.error = "";
        message.exitCode = 0;
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<CommandResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandResponse): CommandResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string output */ 2:
                    message.output = reader.string();
                    break;
                case /* string error */ 3:
                    message.error = reader.string();
                    break;
                case /* int32 exit_code */ 4:
                    message.exitCode = reader.int32();
                    break;
                case /* string session_id */ 5:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string output = 2; */
        if (message.output !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.output);
        /* string error = 3; */
        if (message.error !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.error);
        /* int32 exit_code = 4; */
        if (message.exitCode !== 0)
            writer.tag(4, WireType.Varint).int32(message.exitCode);
        /* string session_id = 5; */
        if (message.sessionId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.CommandResponse
 */
export const CommandResponse = new CommandResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OutputRequest$Type extends MessageType<OutputRequest> {
    constructor() {
        super("terminal.OutputRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "max_lines", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OutputRequest>): OutputRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.maxLines = 0;
        if (value !== undefined)
            reflectionMergePartial<OutputRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OutputRequest): OutputRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* int32 max_lines */ 2:
                    message.maxLines = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OutputRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* int32 max_lines = 2; */
        if (message.maxLines !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxLines);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.OutputRequest
 */
export const OutputRequest = new OutputRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OutputResponse$Type extends MessageType<OutputResponse> {
    constructor() {
        super("terminal.OutputResponse", [
            { no: 1, name: "lines", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "has_more", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OutputResponse>): OutputResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lines = [];
        message.hasMore = false;
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<OutputResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OutputResponse): OutputResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string lines */ 1:
                    message.lines.push(reader.string());
                    break;
                case /* bool has_more */ 2:
                    message.hasMore = reader.bool();
                    break;
                case /* string session_id */ 3:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OutputResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string lines = 1; */
        for (let i = 0; i < message.lines.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.lines[i]);
        /* bool has_more = 2; */
        if (message.hasMore !== false)
            writer.tag(2, WireType.Varint).bool(message.hasMore);
        /* string session_id = 3; */
        if (message.sessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.OutputResponse
 */
export const OutputResponse = new OutputResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequest$Type extends MessageType<StreamRequest> {
    constructor() {
        super("terminal.StreamRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "follow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamRequest>): StreamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.follow = false;
        if (value !== undefined)
            reflectionMergePartial<StreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRequest): StreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* bool follow */ 2:
                    message.follow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* bool follow = 2; */
        if (message.follow !== false)
            writer.tag(2, WireType.Varint).bool(message.follow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.StreamRequest
 */
export const StreamRequest = new StreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OutputChunk$Type extends MessageType<OutputChunk> {
    constructor() {
        super("terminal.OutputChunk", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "is_error", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OutputChunk>): OutputChunk {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = "";
        message.sessionId = "";
        message.timestamp = 0n;
        message.isError = false;
        if (value !== undefined)
            reflectionMergePartial<OutputChunk>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OutputChunk): OutputChunk {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* int64 timestamp */ 3:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* bool is_error */ 4:
                    message.isError = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OutputChunk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* int64 timestamp = 3; */
        if (message.timestamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timestamp);
        /* bool is_error = 4; */
        if (message.isError !== false)
            writer.tag(4, WireType.Varint).bool(message.isError);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.OutputChunk
 */
export const OutputChunk = new OutputChunk$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionRequest$Type extends MessageType<SessionRequest> {
    constructor() {
        super("terminal.SessionRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "shell", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "working_directory", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "environment", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 5, name: "cols", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "rows", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SessionRequest>): SessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.shell = "";
        message.workingDirectory = "";
        message.environment = {};
        message.cols = 0;
        message.rows = 0;
        if (value !== undefined)
            reflectionMergePartial<SessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionRequest): SessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* string shell */ 2:
                    message.shell = reader.string();
                    break;
                case /* string working_directory */ 3:
                    message.workingDirectory = reader.string();
                    break;
                case /* map<string, string> environment */ 4:
                    this.binaryReadMap4(message.environment, reader, options);
                    break;
                case /* int32 cols */ 5:
                    message.cols = reader.int32();
                    break;
                case /* int32 rows */ 6:
                    message.rows = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: SessionRequest["environment"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SessionRequest["environment"] | undefined, val: SessionRequest["environment"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for terminal.SessionRequest.environment");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: SessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* string shell = 2; */
        if (message.shell !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.shell);
        /* string working_directory = 3; */
        if (message.workingDirectory !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.workingDirectory);
        /* map<string, string> environment = 4; */
        for (let k of globalThis.Object.keys(message.environment))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.environment[k]).join();
        /* int32 cols = 5; */
        if (message.cols !== 0)
            writer.tag(5, WireType.Varint).int32(message.cols);
        /* int32 rows = 6; */
        if (message.rows !== 0)
            writer.tag(6, WireType.Varint).int32(message.rows);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.SessionRequest
 */
export const SessionRequest = new SessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionResponse$Type extends MessageType<SessionResponse> {
    constructor() {
        super("terminal.SessionResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionResponse>): SessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.sessionId = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionResponse): SessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.SessionResponse
 */
export const SessionResponse = new SessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSessionsRequest$Type extends MessageType<ListSessionsRequest> {
    constructor() {
        super("terminal.ListSessionsRequest", []);
    }
    create(value?: PartialMessage<ListSessionsRequest>): ListSessionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListSessionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSessionsRequest): ListSessionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSessionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.ListSessionsRequest
 */
export const ListSessionsRequest = new ListSessionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSessionsResponse$Type extends MessageType<ListSessionsResponse> {
    constructor() {
        super("terminal.ListSessionsResponse", [
            { no: 1, name: "sessions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SessionInfo }
        ]);
    }
    create(value?: PartialMessage<ListSessionsResponse>): ListSessionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessions = [];
        if (value !== undefined)
            reflectionMergePartial<ListSessionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSessionsResponse): ListSessionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated terminal.SessionInfo sessions */ 1:
                    message.sessions.push(SessionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSessionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated terminal.SessionInfo sessions = 1; */
        for (let i = 0; i < message.sessions.length; i++)
            SessionInfo.internalBinaryWrite(message.sessions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.ListSessionsResponse
 */
export const ListSessionsResponse = new ListSessionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionInfo$Type extends MessageType<SessionInfo> {
    constructor() {
        super("terminal.SessionInfo", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "shell", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "working_directory", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cols", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "rows", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "created_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SessionInfo>): SessionInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.shell = "";
        message.workingDirectory = "";
        message.cols = 0;
        message.rows = 0;
        message.isActive = false;
        message.createdAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<SessionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionInfo): SessionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* string shell */ 2:
                    message.shell = reader.string();
                    break;
                case /* string working_directory */ 3:
                    message.workingDirectory = reader.string();
                    break;
                case /* int32 cols */ 4:
                    message.cols = reader.int32();
                    break;
                case /* int32 rows */ 5:
                    message.rows = reader.int32();
                    break;
                case /* bool is_active */ 6:
                    message.isActive = reader.bool();
                    break;
                case /* int64 created_at */ 7:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* string shell = 2; */
        if (message.shell !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.shell);
        /* string working_directory = 3; */
        if (message.workingDirectory !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.workingDirectory);
        /* int32 cols = 4; */
        if (message.cols !== 0)
            writer.tag(4, WireType.Varint).int32(message.cols);
        /* int32 rows = 5; */
        if (message.rows !== 0)
            writer.tag(5, WireType.Varint).int32(message.rows);
        /* bool is_active = 6; */
        if (message.isActive !== false)
            writer.tag(6, WireType.Varint).bool(message.isActive);
        /* int64 created_at = 7; */
        if (message.createdAt !== 0n)
            writer.tag(7, WireType.Varint).int64(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.SessionInfo
 */
export const SessionInfo = new SessionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KillSessionRequest$Type extends MessageType<KillSessionRequest> {
    constructor() {
        super("terminal.KillSessionRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KillSessionRequest>): KillSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<KillSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KillSessionRequest): KillSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KillSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.KillSessionRequest
 */
export const KillSessionRequest = new KillSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KillSessionResponse$Type extends MessageType<KillSessionResponse> {
    constructor() {
        super("terminal.KillSessionResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KillSessionResponse>): KillSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<KillSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KillSessionResponse): KillSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KillSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message terminal.KillSessionResponse
 */
export const KillSessionResponse = new KillSessionResponse$Type();
/**
 * @generated ServiceType for protobuf service terminal.TerminalService
 */
export const TerminalService = new ServiceType("terminal.TerminalService", [
    { name: "ExecuteCommand", options: {}, I: CommandRequest, O: CommandResponse },
    { name: "GetOutput", options: {}, I: OutputRequest, O: OutputResponse },
    { name: "StreamOutput", serverStreaming: true, options: {}, I: StreamRequest, O: OutputChunk },
    { name: "CreateSession", options: {}, I: SessionRequest, O: SessionResponse },
    { name: "ListSessions", options: {}, I: ListSessionsRequest, O: ListSessionsResponse },
    { name: "KillSession", options: {}, I: KillSessionRequest, O: KillSessionResponse }
]);
