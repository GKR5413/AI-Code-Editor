/**
 * @fileoverview gRPC-Web generated client stub for terminal
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.32.0
// source: terminal.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.terminal = require('./terminal_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.terminal.TerminalServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.terminal.TerminalServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.terminal.CommandRequest,
 *   !proto.terminal.CommandResponse>}
 */
const methodDescriptor_TerminalService_ExecuteCommand = new grpc.web.MethodDescriptor(
  '/terminal.TerminalService/ExecuteCommand',
  grpc.web.MethodType.UNARY,
  proto.terminal.CommandRequest,
  proto.terminal.CommandResponse,
  /**
   * @param {!proto.terminal.CommandRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.terminal.CommandResponse.deserializeBinary
);


/**
 * @param {!proto.terminal.CommandRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.terminal.CommandResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.terminal.CommandResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.terminal.TerminalServiceClient.prototype.executeCommand =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/terminal.TerminalService/ExecuteCommand',
      request,
      metadata || {},
      methodDescriptor_TerminalService_ExecuteCommand,
      callback);
};


/**
 * @param {!proto.terminal.CommandRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.terminal.CommandResponse>}
 *     Promise that resolves to the response
 */
proto.terminal.TerminalServicePromiseClient.prototype.executeCommand =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/terminal.TerminalService/ExecuteCommand',
      request,
      metadata || {},
      methodDescriptor_TerminalService_ExecuteCommand);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.terminal.OutputRequest,
 *   !proto.terminal.OutputResponse>}
 */
const methodDescriptor_TerminalService_GetOutput = new grpc.web.MethodDescriptor(
  '/terminal.TerminalService/GetOutput',
  grpc.web.MethodType.UNARY,
  proto.terminal.OutputRequest,
  proto.terminal.OutputResponse,
  /**
   * @param {!proto.terminal.OutputRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.terminal.OutputResponse.deserializeBinary
);


/**
 * @param {!proto.terminal.OutputRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.terminal.OutputResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.terminal.OutputResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.terminal.TerminalServiceClient.prototype.getOutput =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/terminal.TerminalService/GetOutput',
      request,
      metadata || {},
      methodDescriptor_TerminalService_GetOutput,
      callback);
};


/**
 * @param {!proto.terminal.OutputRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.terminal.OutputResponse>}
 *     Promise that resolves to the response
 */
proto.terminal.TerminalServicePromiseClient.prototype.getOutput =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/terminal.TerminalService/GetOutput',
      request,
      metadata || {},
      methodDescriptor_TerminalService_GetOutput);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.terminal.StreamRequest,
 *   !proto.terminal.OutputChunk>}
 */
const methodDescriptor_TerminalService_StreamOutput = new grpc.web.MethodDescriptor(
  '/terminal.TerminalService/StreamOutput',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.terminal.StreamRequest,
  proto.terminal.OutputChunk,
  /**
   * @param {!proto.terminal.StreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.terminal.OutputChunk.deserializeBinary
);


/**
 * @param {!proto.terminal.StreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.terminal.OutputChunk>}
 *     The XHR Node Readable Stream
 */
proto.terminal.TerminalServiceClient.prototype.streamOutput =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/terminal.TerminalService/StreamOutput',
      request,
      metadata || {},
      methodDescriptor_TerminalService_StreamOutput);
};


/**
 * @param {!proto.terminal.StreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.terminal.OutputChunk>}
 *     The XHR Node Readable Stream
 */
proto.terminal.TerminalServicePromiseClient.prototype.streamOutput =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/terminal.TerminalService/StreamOutput',
      request,
      metadata || {},
      methodDescriptor_TerminalService_StreamOutput);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.terminal.SessionRequest,
 *   !proto.terminal.SessionResponse>}
 */
const methodDescriptor_TerminalService_CreateSession = new grpc.web.MethodDescriptor(
  '/terminal.TerminalService/CreateSession',
  grpc.web.MethodType.UNARY,
  proto.terminal.SessionRequest,
  proto.terminal.SessionResponse,
  /**
   * @param {!proto.terminal.SessionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.terminal.SessionResponse.deserializeBinary
);


/**
 * @param {!proto.terminal.SessionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.terminal.SessionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.terminal.SessionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.terminal.TerminalServiceClient.prototype.createSession =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/terminal.TerminalService/CreateSession',
      request,
      metadata || {},
      methodDescriptor_TerminalService_CreateSession,
      callback);
};


/**
 * @param {!proto.terminal.SessionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.terminal.SessionResponse>}
 *     Promise that resolves to the response
 */
proto.terminal.TerminalServicePromiseClient.prototype.createSession =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/terminal.TerminalService/CreateSession',
      request,
      metadata || {},
      methodDescriptor_TerminalService_CreateSession);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.terminal.ListSessionsRequest,
 *   !proto.terminal.ListSessionsResponse>}
 */
const methodDescriptor_TerminalService_ListSessions = new grpc.web.MethodDescriptor(
  '/terminal.TerminalService/ListSessions',
  grpc.web.MethodType.UNARY,
  proto.terminal.ListSessionsRequest,
  proto.terminal.ListSessionsResponse,
  /**
   * @param {!proto.terminal.ListSessionsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.terminal.ListSessionsResponse.deserializeBinary
);


/**
 * @param {!proto.terminal.ListSessionsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.terminal.ListSessionsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.terminal.ListSessionsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.terminal.TerminalServiceClient.prototype.listSessions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/terminal.TerminalService/ListSessions',
      request,
      metadata || {},
      methodDescriptor_TerminalService_ListSessions,
      callback);
};


/**
 * @param {!proto.terminal.ListSessionsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.terminal.ListSessionsResponse>}
 *     Promise that resolves to the response
 */
proto.terminal.TerminalServicePromiseClient.prototype.listSessions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/terminal.TerminalService/ListSessions',
      request,
      metadata || {},
      methodDescriptor_TerminalService_ListSessions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.terminal.KillSessionRequest,
 *   !proto.terminal.KillSessionResponse>}
 */
const methodDescriptor_TerminalService_KillSession = new grpc.web.MethodDescriptor(
  '/terminal.TerminalService/KillSession',
  grpc.web.MethodType.UNARY,
  proto.terminal.KillSessionRequest,
  proto.terminal.KillSessionResponse,
  /**
   * @param {!proto.terminal.KillSessionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.terminal.KillSessionResponse.deserializeBinary
);


/**
 * @param {!proto.terminal.KillSessionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.terminal.KillSessionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.terminal.KillSessionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.terminal.TerminalServiceClient.prototype.killSession =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/terminal.TerminalService/KillSession',
      request,
      metadata || {},
      methodDescriptor_TerminalService_KillSession,
      callback);
};


/**
 * @param {!proto.terminal.KillSessionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.terminal.KillSessionResponse>}
 *     Promise that resolves to the response
 */
proto.terminal.TerminalServicePromiseClient.prototype.killSession =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/terminal.TerminalService/KillSession',
      request,
      metadata || {},
      methodDescriptor_TerminalService_KillSession);
};


module.exports = proto.terminal;

