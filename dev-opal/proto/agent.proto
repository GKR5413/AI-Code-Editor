syntax = "proto3";

package agent;

// AI Agent service for Gemini interactions
service AgentService {
  // Health check
  rpc HealthCheck(HealthRequest) returns (HealthResponse);
  
  // Send message to AI agent
  rpc SendMessage(MessageRequest) returns (MessageResponse);
  
  // Stream conversation with AI
  rpc StreamConversation(StreamConversationRequest) returns (stream ConversationChunk);
  
  // Generate code
  rpc GenerateCode(CodeGenerationRequest) returns (CodeGenerationResponse);
  
  // Get supported AI models
  rpc GetSupportedModels(ModelsRequest) returns (ModelsResponse);
}

// Health check messages
message HealthRequest {}

message HealthResponse {
  bool healthy = 1;
  string message = 2;
  map<string, string> services = 3;
}

// Message exchange
message MessageRequest {
  string model = 1;
  repeated ChatMessage messages = 2;
  MessageOptions options = 3;
}

message ChatMessage {
  string role = 1; // 'user', 'assistant', 'system'
  string content = 2;
  int64 timestamp = 3;
}

message MessageOptions {
  double temperature = 1;
  int32 max_tokens = 2;
  repeated string stop_sequences = 3;
  bool stream = 4;
}

message MessageResponse {
  bool success = 1;
  string response = 2;
  string model = 3;
  int64 timestamp = 4;
  string error = 5;
  TokenUsage token_usage = 6;
}

message TokenUsage {
  int32 prompt_tokens = 1;
  int32 completion_tokens = 2;
  int32 total_tokens = 3;
}

// Streaming conversation
message StreamConversationRequest {
  string model = 1;
  repeated ChatMessage messages = 2;
  MessageOptions options = 3;
}

message ConversationChunk {
  string content = 1;
  string type = 2; // 'text', 'status', 'error', 'done'
  bool is_final = 3;
  int64 timestamp = 4;
  string model = 5;
}

// Code generation
message CodeGenerationRequest {
  string prompt = 1;
  string language = 2;
  string model = 3;
  CodeGenerationOptions options = 4;
}

message CodeGenerationOptions {
  bool include_comments = 1;
  string style = 2; // 'clean', 'verbose', 'minimal'
  repeated string frameworks = 3;
}

message CodeGenerationResponse {
  bool success = 1;
  string code = 2;
  string language = 3;
  string explanation = 4;
  repeated string suggestions = 5;
  string error = 6;
  int64 timestamp = 7;
}

// Model information
message ModelsRequest {}

message ModelsResponse {
  bool success = 1;
  repeated AIModel models = 2;
  string error = 3;
}

message AIModel {
  string id = 1;
  string name = 2;
  string provider = 3; // 'gemini', 'openai', 'anthropic'
  string description = 4;
  int32 max_tokens = 5;
  bool supports_streaming = 6;
  repeated string capabilities = 7; // 'text', 'code', 'analysis'
}