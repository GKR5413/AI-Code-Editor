services:
  # Main IDE Application
  ide-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Vite dev server
    volumes:
      - .:/app
      - node_modules:/app/node_modules
      - shared_workspace:/app/workspace  # Shared workspace for all containers
      - shared_projects:/app/projects     # User project files
    environment:
      - NODE_ENV=development
      - COMPILER_SERVICE_URL=http://compiler:3002
      - WORKSPACE_PATH=/app/workspace
      - PROJECTS_PATH=/app/projects
    depends_on:
      - compiler
      - frontend-gateway
    networks:
      - ide-network
    restart: unless-stopped

  # Frontend gRPC Gateway Service
  frontend-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    image: ai-ide-frontend-gateway:latest
    ports:
      - "50051:50051"  # gRPC gateway
      - "8080:8080"    # gRPC-Web proxy
    environment:
      - NODE_ENV=production
      - GRPC_PORT=50051
      - GRPC_WEB_PORT=8080
      - COMPILER_GRPC_URL=compiler:50052
      - AGENT_GRPC_URL=agent:50053
      - AUTH_GRPC_URL=auth-service:50054
      - TERMINAL_GRPC_URL=grpc-terminal:50051
    volumes:
      - ./frontend-gateway:/app
      - ./proto:/app/proto              # Protocol buffer definitions
    networks:
      - ide-network
    restart: unless-stopped
    depends_on:
      - compiler
      - agent
      - auth-service

  # Multi-language Compiler Service
  compiler:
    build:
      context: .
      dockerfile: Dockerfile.compiler
    user: "0:0"  # Root user for workspace access
    ports:
      - "3002:3002"  # HTTP service (backward compatibility)
      - "50052:50052"  # gRPC service
    volumes:
      - ./compiler-service:/app
      - shared_workspace:/workspace      # Shared workspace access
      - shared_projects:/projects        # User project files access
      - compiler_output:/app/output      # Compilation output
      - compiler_temp:/app/temp          # Temporary compilation files
      - compiler_logs:/app/logs          # Compilation logs
      - compiler_cache:/app/cache        # Compilation cache for faster builds
      - ./proto:/app/proto              # Protocol buffer definitions
    environment:
      - NODE_ENV=production
      - PORT=3002
      - GRPC_PORT=50052
      - WORKSPACE_PATH=/workspace
      - PROJECTS_PATH=/projects
      - OUTPUT_PATH=/app/output
      - TEMP_PATH=/app/temp
      - CACHE_PATH=/app/cache
    networks:
      - ide-network
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined  # Allows various system calls needed by compilers
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    tmpfs:
      - /tmp:size=1G,exec
    command: sh -c "node server.js & node grpc-server.js & wait"
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('health ok')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # gRPC Terminal Service (for Gemini Agent communication)
  grpc-terminal:
    build:
      context: .
      dockerfile: Dockerfile.grpc-terminal
    image: ai-ide-grpc-terminal:latest
    user: "501:20"  # Host user permissions for write access
    ports:
      - "50055:50051"  # gRPC server port (changed to avoid conflict)
    volumes:
      - shared_workspace:/workspace      # Shared workspace access
      - shared_projects:/projects        # User project files access
      
    environment:
      - NODE_ENV=production
      - PORT=50051
      - WORKSPACE_PATH=/workspace
      - PROJECTS_PATH=/projects
    networks:
      - ide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('health ok')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  

  # Agent Service (AI Assistant - Gemini only)
  agent:
    build:
      context: ./agent-service
      dockerfile: Dockerfile
    image: ai-ide-agent:latest
    ports:
      - "6000:6000"    # HTTP service (backward compatibility)
      - "50053:50053"  # gRPC service
    environment:
      - NODE_ENV=production
      - AGENT_SERVICE_PORT=6000
      - GRPC_PORT=50053
      - WORKSPACE_PATH=/workspace
      - GEMINI_API_KEY=AIzaSyDnVasnaWz9BTFdUoJd6KXFg4CzTpVCt_w
      - GROQ_API_KEY=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
    volumes:
      - ./agent-service:/app
      - shared_workspace:/workspace      # Shared workspace access
      - ./proto:/app/proto              # Protocol buffer definitions
    depends_on:
      - grpc-terminal
    networks:
      - ide-network
    restart: unless-stopped
    command: node grpc-server.js

  # Authentication Service (GitHub OAuth + manual auth)
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    image: velocide-auth:latest
    environment:
      - NODE_ENV=production
      - AUTH_PORT=3010
      - GRPC_PORT=50054
      - FRONTEND_URL=http://localhost:5173
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_CALLBACK_URL=http://localhost:3010/auth/github/callback
      - SESSION_SECRET=${SESSION_SECRET:-change-me}
      - JWT_SECRET=${JWT_SECRET:-change-me}
    ports:
      - "3010:3010"   # HTTP service
      - "50054:50054" # gRPC service
    volumes:
      - ./auth-service/database:/app/database
      - ./proto:/app/proto              # Protocol buffer definitions
    networks:
      - ide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('health ok')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis for caching (optional - for future use)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ide-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for project metadata (optional - for future use)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ide_db
      POSTGRES_USER: ide_user
      POSTGRES_PASSWORD: ide_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ide-network
    restart: unless-stopped

  # Language Server Protocol Hub (future enhancement)
  lsp-server:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./lsp-server:/app
    ports:
      - "3004:3003"
    command: sh -c "npm install && npm start"
    networks:
      - ide-network
    restart: unless-stopped
    depends_on:
      - compiler

networks:
  ide-network:
    driver: bridge

volumes:
  node_modules:
  # Shared volumes for seamless integration
  shared_workspace:     # Main workspace shared across all containers
  shared_projects:      # User project files accessible by all services
  # Container-specific volumes
  compiler_output:      # Compilation output
  compiler_temp:        # Temporary compilation files  
  compiler_logs:        # Compilation logs
  compiler_cache:       # Compilation cache for faster builds
  
  # Database volumes
  redis_data:
  postgres_data: